(let (test-code (assemble '((PUSH 1)
                            (PUSH 2)
                            (CONS nil))))
  (prn "Running test bytecode:")
  (prn test-code)
  (prn (run-bytecode test-code)))

(let (test-code (assemble `((PUSH nil)
                            (PUSH 2)
                            (CONS nil)
                            (PUSH 2)
                            (CONS nil)
                            (CALL_BUILTIN ,+))))
  (prn "Running test bytecode:")
  (prn test-code)
  (prn (run-bytecode test-code)))

(let (test-code-func (assemble `((PUSH ("Print from called function."))
                                 (CALL_BUILTIN ,prn)
                                 (POP nil)
                                 (RET nil))))
  (let (test-code (assemble `((PUSH nil)
                              (PUSH nil)
                              (PUSH 2)
                              (CONS nil)
                              (PUSH 2)
                              (CONS nil)
                              (CALL_BUILTIN ,+)
                              (CALL ,test-code-func)
                              (PUSH ("Successfully returned."))
                              (CALL_BUILTIN ,prn))))
    (assert (sym= (type test-code-func) 'bytecode))
    (prn "Running test bytecode:")
    (prn test-code)
    (prn "Function to call:")
    (prn test-code-func)
    (prn (run-bytecode test-code))))
